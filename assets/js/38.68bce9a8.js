(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{302:function(t,o,r){"use strict";r.r(o);var a=r(13),_=Object(a.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("p"),o("div",{staticClass:"table-of-contents"},[o("ul",[o("li",[o("a",{attrs:{href:"#spring-boot-面试题"}},[t._v("Spring Boot 面试题")]),o("ul",[o("li",[o("a",{attrs:{href:"#_1、介绍一下springboot"}},[t._v("1、介绍一下SpringBoot")])]),o("li",[o("a",{attrs:{href:"#_2、springboot的优点"}},[t._v("2、SpringBoot的优点")])]),o("li",[o("a",{attrs:{href:"#_3、springboot中的核心注解"}},[t._v("3、SpringBoot中的核心注解")])]),o("li",[o("a",{attrs:{href:"#_4、介绍下springboot的自动装配原理"}},[t._v("4、介绍下SpringBoot的自动装配原理")])]),o("li",[o("a",{attrs:{href:"#_5、谈谈你对starter的理解"}},[t._v("5、谈谈你对starter的理解")])]),o("li",[o("a",{attrs:{href:"#_6、springboot项目需要单独的web容器吗"}},[t._v("6、SpringBoot项目需要单独的Web容器吗？")])]),o("li",[o("a",{attrs:{href:"#_7、介绍几个常用的starter"}},[t._v("7、介绍几个常用的starter")])]),o("li",[o("a",{attrs:{href:"#_8、springboot项目的启动方式"}},[t._v("8、SpringBoot项目的启动方式")])]),o("li",[o("a",{attrs:{href:"#_9、springboot中是如何解决跨域问题"}},[t._v("9、SpringBoot中是如何解决跨域问题")])]),o("li",[o("a",{attrs:{href:"#_10、springboot项目中如何使用log4j"}},[t._v("10、SpringBoot项目中如何使用log4j")])]),o("li",[o("a",{attrs:{href:"#_11、bootstrap-yml文件的作用"}},[t._v("11、bootstrap.yml文件的作用")])]),o("li",[o("a",{attrs:{href:"#_12、springboot中常用的注解"}},[t._v("12、SpringBoot中常用的注解")])]),o("li",[o("a",{attrs:{href:"#_13、actuator的理解"}},[t._v("13、Actuator的理解")])]),o("li",[o("a",{attrs:{href:"#_14、如何整合activemq"}},[t._v("14、如何整合ActiveMQ")])])])])])]),o("p"),t._v(" "),o("h2",{attrs:{id:"spring-boot-面试题"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-面试题"}},[t._v("#")]),t._v(" Spring Boot 面试题")]),t._v(" "),o("h3",{attrs:{id:"_1、介绍一下springboot"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1、介绍一下springboot"}},[t._v("#")]),t._v(" 1、介绍一下SpringBoot")]),t._v(" "),o("p",[t._v("SpringBoot是基于Spring创建的一个应用层框架，14年发布1.0，比以前的SSM，基于配置的方式效率要高很多")]),t._v(" "),o("h3",{attrs:{id:"_2、springboot的优点"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2、springboot的优点"}},[t._v("#")]),t._v(" 2、SpringBoot的优点")]),t._v(" "),o("ul",[o("li",[t._v("独立运行（不需要单独安装一个tomcat容器，然后把项目部署到tomcat容器中），在Springboot中只要我们引入web-start会帮我们内嵌一个tomcat容器")]),t._v(" "),o("li",[t._v("简化配置，约定大于配置的理念")]),t._v(" "),o("li",[t._v("自动配置")]),t._v(" "),o("li",[t._v("无代码生成xml配置")]),t._v(" "),o("li",[t._v("Actuator应用监控")])]),t._v(" "),o("h3",{attrs:{id:"_3、springboot中的核心注解"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3、springboot中的核心注解"}},[t._v("#")]),t._v(" 3、SpringBoot中的核心注解")]),t._v(" "),o("ul",[o("li",[o("code",[t._v("@SpringBootApplication")]),t._v("注解，启动"),o("code",[t._v("SpringBoot")]),t._v("容器的话需要，是一个组合注解。\n"),o("ul",[o("li",[t._v("有4个元注解")]),t._v(" "),o("li",[o("code",[t._v("@ComponentScan")]),t._v("：默认情况下会扫描当前包及其子包下面所有被"),o("code",[t._v("@Component")]),t._v("注解修饰的java类(Spring底层在解析配置类，会去解析"),o("code",[t._v("@ComponentScan")]),t._v("，读取"),o("code",[t._v("basePackages")]),t._v("，如果没有读取到会将当前配置类所在的包当做扫描包)  ComponentScanAnnotationParser.java类（basePackages.idEmpty()）\n"),o("ul",[o("li",[t._v("可以修改默认的包扫描路径")])]),t._v(" "),o("div",{staticClass:"language-java line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-java"}},[o("code",[o("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scanBasePackages "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.***.***"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br")])])]),t._v(" "),o("li",[o("code",[t._v("@SpringBootConfiguration")]),t._v("：组合了"),o("code",[t._v("@Configuration")]),t._v("注解，也就是说明被"),o("code",[t._v("SpringBootApplication")]),t._v("所标识的java类就是一个java配置类")]),t._v(" "),o("li",[o("code",[t._v("@EnableAutoConfiguration")]),t._v("：打开自动装配的功能 -> "),o("code",[t._v("META-INF/spring.factories")]),t._v("文件中加载需要自动注入的java类")])])])]),t._v(" "),o("h3",{attrs:{id:"_4、介绍下springboot的自动装配原理"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4、介绍下springboot的自动装配原理"}},[t._v("#")]),t._v(" 4、介绍下SpringBoot的自动装配原理")]),t._v(" "),o("p",[t._v("在启动SpringBoot项目的main方法的头部有一个"),o("code",[t._v("@SpringBootApplication")]),t._v("注解，在这个注解中组合了一个"),o("code",[t._v("@EnableAutoConfiguration")]),t._v("，这个注解的作用就是打开自动装配，而在这个注解中，又包含了"),o("code",[t._v("@import")]),t._v("注解，这个直接中引入了一个实现了"),o("code",[t._v("importSelector")]),t._v("接口的类型，在对应的"),o("code",[t._v("SelectImports")]),t._v("方法中会读取"),o("code",[t._v("MATE/INF")]),t._v("目录下的"),o("code",[t._v("spring.factories")]),t._v("文件中需要被自动装配的所有配置类，然后通过"),o("code",[t._v("META-INF")]),t._v("下面的"),o("code",[t._v("spring-autoconfigure-metadata.properties")]),t._v("文件做条件过滤，最后返回的就是需要自动装配的相关的对象")]),t._v(" "),o("h3",{attrs:{id:"_5、谈谈你对starter的理解"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_5、谈谈你对starter的理解"}},[t._v("#")]),t._v(" 5、谈谈你对starter的理解")]),t._v(" "),o("p",[o("code",[t._v("starter")]),t._v("的作用是在"),o("code",[t._v("MATA-INF")]),t._v("目录下提供了一个"),o("code",[t._v("spring.factories")]),t._v("文件，在该文件中我们添加了一个需要注入到Spring容器中对应的配置类。"),o("br"),t._v(" "),o("code",[t._v("第三方的框架需要整合到SpringBoot项目中")]),t._v("，也就是需要把第三方框架的核心组件注入到Spring容器中，提供的方式就是"),o("code",[t._v("spring.factories")]),t._v("文件。"),o("br"),t._v("\nStarter也可以理解为一个"),o("code",[t._v("启动器")]),o("br"),t._v("\nStarter的命名规范：官方的以"),o("code",[t._v("spring-boot-starter-xxx")]),t._v("命名；非官方："),o("code",[t._v("xxx-spring-boot-starter")]),t._v("命名，如："),o("code",[t._v("mybatis-spring-boot-starter")])]),t._v(" "),o("h3",{attrs:{id:"_6、springboot项目需要单独的web容器吗"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_6、springboot项目需要单独的web容器吗"}},[t._v("#")]),t._v(" 6、SpringBoot项目需要单独的Web容器吗？")]),t._v(" "),o("p",[t._v("可以不需要，"),o("code",[t._v("SpringBoot")]),t._v("项目中我们会添加一个"),o("code",[t._v("spring-boot-starter-web")]),t._v("这个依赖，而这个依赖内嵌了"),o("code",[t._v("Tomcat")]),t._v("容器")]),t._v(" "),o("h3",{attrs:{id:"_7、介绍几个常用的starter"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7、介绍几个常用的starter"}},[t._v("#")]),t._v(" 7、介绍几个常用的starter")]),t._v(" "),o("p",[o("code",[t._v("spring-boot-starter-web")]),t._v(" 提供"),o("code",[t._v("SpringMVC")]),t._v(" + 内嵌了"),o("code",[t._v("Tomcat")]),t._v("容器"),o("br"),t._v(" "),o("code",[t._v("spring-boot-starter-redis")]),t._v(" 提供了"),o("code",[t._v("Redis")]),t._v("服务"),o("br"),t._v(" "),o("code",[t._v("mybatis-spring-boot-starter")]),t._v(" 提供了"),o("code",[t._v("Mybatis")])]),t._v(" "),o("h3",{attrs:{id:"_8、springboot项目的启动方式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8、springboot项目的启动方式"}},[t._v("#")]),t._v(" 8、SpringBoot项目的启动方式")]),t._v(" "),o("ul",[o("li",[t._v("直接通过main方法来运行")]),t._v(" "),o("li",[t._v("打成jar 通过java -jar 的命令或打成war包，然后把这个war包放到web容器中")]),t._v(" "),o("li",[t._v("使用Maven/Gradle插件来运行")])]),t._v(" "),o("h3",{attrs:{id:"_9、springboot中是如何解决跨域问题"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_9、springboot中是如何解决跨域问题"}},[t._v("#")]),t._v(" 9、SpringBoot中是如何解决跨域问题")]),t._v(" "),o("ul",[o("li",[t._v("可以通过"),o("code",[t._v("jsonp")]),t._v("解决跨域问题，但是只支持get方式的请求")]),t._v(" "),o("li",[o("code",[t._v("SpringBoot")]),t._v("项目中通过"),o("code",[t._v("WebMvcConfigure")]),t._v("重写里面的"),o("code",[t._v("addCorsMappings")]),t._v("方法，在这个方法中添加允许跨域的相关请求")]),t._v(" "),o("li",[t._v("通过"),o("code",[t._v("@CorssOrigin")])])]),t._v(" "),o("h3",{attrs:{id:"_10、springboot项目中如何使用log4j"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_10、springboot项目中如何使用log4j"}},[t._v("#")]),t._v(" 10、SpringBoot项目中如何使用log4j")]),t._v(" "),o("p",[t._v("在SpringBoot项目中默认提供了日志框架"),o("code",[t._v("LogBack")]),t._v("，所以我们如何需要引入"),o("code",[t._v("log4j")]),t._v("的话，必须"),o("code",[t._v("先排除LogBack的依赖")]),t._v("，然后再添加log4j的依赖，然后在src/main/resource目录下创建log4j.properties文件，然后就可以进行日志的相关的配置")]),t._v(" "),o("h3",{attrs:{id:"_11、bootstrap-yml文件的作用"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_11、bootstrap-yml文件的作用"}},[t._v("#")]),t._v(" 11、bootstrap.yml文件的作用")]),t._v(" "),o("p",[t._v("SpringBoot中默认支持的属性文件有下面4种："),o("br"),t._v(" "),o("code",[t._v("application.properties、application.xml、application.yml、application.yaml")])]),t._v(" "),o("p",[o("code",[t._v("bootstrap.yml")]),t._v("文件：在SpringBoot中默认是不支持的，"),o("strong",[t._v("需要在SpringCloud环境下才支持")]),t._v("，作用是在SpringBoot项目启动之前的一个父容器，该父容器可以"),o("strong",[t._v("在SpringBoot容器启动之前完成一些加载初始化的操作")]),t._v("，比如加载配置中心的信息")]),t._v(" "),o("h3",{attrs:{id:"_12、springboot中常用的注解"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_12、springboot中常用的注解"}},[t._v("#")]),t._v(" 12、SpringBoot中常用的注解")]),t._v(" "),o("p",[t._v("@ResetController"),o("br"),t._v("\n@Service"),o("br"),t._v("\n@Autowired"),o("br"),t._v("\n@Resource"),o("br"),t._v("\n@RequestMapping GetMapping PostMapping"),o("br"),t._v("\n@import 在xml文件中有个import标签，引入其他的配置文件，@import注解其实是import标签的替代，也可以导入第三方的配置类，而且和@Enablexxx可以实现功能模块的复用，@import注解还可以导入具体的类型对象到Spring容器中"),o("br"),t._v("\n@Indexed springBoot5之后提供的提升@ComponentScan性能的一个主键")]),t._v(" "),o("h3",{attrs:{id:"_13、actuator的理解"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_13、actuator的理解"}},[t._v("#")]),t._v(" 13、Actuator的理解")]),t._v(" "),o("p",[o("code",[t._v("Actuator")]),t._v("是SpringBoot提供的四大神器之一，在单体架构中用到的非常少，但是在分布式微服务架构下就非常有用。")]),t._v(" "),o("ul",[o("li",[t._v("如果有服务出现了故障，定位服务")]),t._v(" "),o("li",[t._v("对整个系统的性能做出监控")]),t._v(" "),o("li",[t._v("统一日志管理")])]),t._v(" "),o("h3",{attrs:{id:"_14、如何整合activemq"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_14、如何整合activemq"}},[t._v("#")]),t._v(" 14、如何整合ActiveMQ")]),t._v(" "),o("p",[t._v("对于集成"),o("code",[t._v("SpringBoot")]),t._v("和"),o("code",[t._v("ActiveMQ")]),t._v("，我们只需要添加"),o("code",[t._v("spring-boot-starter-activemq")]),t._v("的依赖，然后在"),o("code",[t._v("application.properties")]),t._v("属性文件中添加"),o("code",[t._v("ActiveMQ")]),t._v("的配置信息即可，不需要样板代码")]),t._v(" "),o("p",[t._v("3、什么是 JavaConfig？\n4、如何重新加载 Spring Boot 上的更改，而无需重新启动服务器？\n5、Spring Boot 中的监视器是什么？\n6、如何在 Spring Boot 中禁用 Actuator 端点安全性？\n7、如何在自定义端口上运行 Spring Boot 应用程序？\n8、什么是 YAML？\n9、如何实现 Spring Boot 应用程序的安全性？\n11、如何使用 Spring Boot 实现分页和排序？\n12、什么是 Swagger？你用 Spring Boot 实现了它吗？\n13、什么是 Spring Profiles？\n14、什么是 Spring Batch？\n15、什么是 FreeMarker 模板？\n16、如何使用 Spring Boot 实现异常处理？\n18、什么是 CSRF 攻击？\n19、什么是 WebSockets？\n20、什么是 AOP？\n21、什么是 Apache Kafka？\n22、我们如何监视所有 Spring Boot 微服务？")])])}),[],!1,null,null,null);o.default=_.exports}}]);